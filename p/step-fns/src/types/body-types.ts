import { IAwsLambdaProxyIntegrationRequest, IDictionary, isLambdaProxyRequest, scalar } from "common-types";

/**
 * A request body type that is generated by `aws-orchestrate`
 * to allow _lambda-to-lambda_ calls and _lambda-to-step-fns_ to
 * benefit from a "pass it forward" approach for secrets.
 */
export interface IHeaderBodyRequest<B> {
  kind: "header-body";
  headers: IDictionary<scalar>;
  body: B;
}

/**
 * This type alias represents the most typical body structure that a Lambda
 * function will receive (aka, it just passes through "as is").
 *
 * Note: this is in contrast to a body recieved from a API Gateway caller.
 */
export type IStandardRequest<B> = B;

/**
 * This type represents the body payload that would most typically be passed
 * to a Lambda when API Gateway is the caller (or inbetween for the actual caller).
 *
 * The payload is referred to as a **Proxy Integration Request** and will vary
 * slightly based on whether the REST API or newer HTTP API are being used.
 */
export type IApiGatewayRequest = IAwsLambdaProxyIntegrationRequest;

/**
 * Type guard to validate that the body is structured as a API Gateway request
 */
export function isApiGatewayRequest(body: unknown): body is IAwsLambdaProxyIntegrationRequest {
  return isLambdaProxyRequest(body);
}

/**
 * Type guard to validate that the body is of type `IHeaderBodyRequest`
 */
export function isHeaderBodyRequest<B>(body: unknown): body is IHeaderBodyRequest<B> {
  return typeof body === "object" && (body as IHeaderBodyRequest<B>).kind === "header-body";
}

/**
 * Type guard to validate that the body is of type `IStandardRequest`
 */
export function isStandardRequest<B>(body: unknown): body is IStandardRequest<B> {
  return !isApiGatewayRequest(body) && !isHeaderBodyRequest(body);
}
